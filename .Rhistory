}
}
is_palindrome <- function(word){
charsplit <- strsplit(word, "")[[1]]
revchar <- rev(charsplit)
all(charsplit==revchar)
}
is_palindrome("ada")
strsplit("adada", "")[[1]]
strsplit("adada", "")[[2]]
input <- as.integer(readline(prompt="Enter a number: "));
fact <- function(num){
i <- 1;
fact <- 1;
for(i in 1:num){
fact = fact*i;
}
print(fact);
}
fact(input);
input <- as.integer(readline(prompt="Enter a number: "));
i <- 1;
fact <- 1;
for(i in 1:num){
fact = fact*i;
}
print(fact);
}
fact(input);
input <- as.integer(readline(prompt="Enter a number: "));
fact <- function(num){
i <- 1;
fact <- 1;
for(i in 1:num){
fact = fact*i;
}
print(fact);
}
fact(input);
num = as.integer(readline(prompt = "Enter a number: "))
if(num < 0) {
print("Enter a positive number")
} else {
sum = 0
# use while loop to iterate until zero
while(num > 0) {
sum = sum + num
num = num - 1
}
print(paste("The sum is", sum))
}
a = as.integer(readline(prompt = "Enter 1st number: "))
b = as.integer(readline(prompt = "Enter 2nd number: "))
swap <-function(a ,b){
a = a+b;
b = a-b;
a = a-b;
cat("A is now ",a)
cat("B is now ",b)
}
swap(a, b)
nterms = as.integer(readline(prompt="How many terms? "))
n1 = 0
n2 = 1
count = 2
# check if the number of terms is valid
if(nterms <= 0) {
print("Plese enter a positive integer")
} else {
if(nterms == 1) {
print("Fibonacci sequence:")
print(n1)
} else {
print("Fibonacci sequence:")
print(n1)
print(n2)
while(count < nterms) {
nth = n1 + n2
print(nth)
# update values
n1 = n2
n2 = nth
count = count + 1
}
}
}
input <- as.integer(readline(prompt="Enter a number: "));
fact <- function(num){
i <- 1;
fact <- 1;
for(i in 1:num){
fact = fact*i;
}
print(fact);
}
fact(input);
input <- as.integer(readline(prompt="Enter a number: "));
fact <- function(num){
i <- 1;
fact <- 1;
for(i in 1:num){
fact = fact*i;
}
print(fact);
}
fact(input);
source('E:/R program/Function.r')
num <- function(){
num <- readline("Enter a number: ")
if(num%%2==0){
print('Even');
}
else{
print("Odd");
}
}
num()
num1 <- function(){
num <- readline("Enter a number: ")
if(num%%2==0){
print('Even');
}
else{
print("Odd");
}
}
num1()
num1 <- function(){
num <- as.integer(readline("Enter a number: "))
if(num%%2==0){
print('Even');
}
else{
print("Odd");
}
}
num1()
x<-c(1>2,2<3,3==4)
print x
print(x)
rnorm(10)
rnorm(10)
rnorm(10)
x<-c(1>2,2<3,3==4)
print(x)
for(i in 1:5) {
if(i<=4) {
next
}
print(i)
}
a->2
b->5
Ifelse(a<b,print a)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
search()
install.packages('tidyverse')
library('tidyverse')
search()
y <- data.frame(a = 1, b = "a")
dput(y)
dump(y)
library('shiny')
install packages(shiny)
install.packages('shiny')
library('shiny')
source('~/.active-rstudio-document')
library('shiny')
ui <- fluidPage("hello world")
server <- function(input, output){
}
shinyApp(ui = ui, server = server)
library('shiny')
ui <- fluidPage(
sliderInput("slider", label = h3("Slider"), min = 0,
max = 100, value = 50),
plotOutput('hist')
),
)
server <- function(input, output){
output$hist <- renderPlot({
hist(input$slider)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput("slider", label = h3("Slider"), min = 0,
max = 100, value = 50),
plotOutput('hist')
),
)
server <- function(input, output){
output$hist <- renderPlot({
hist(input$slider)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = 'slider', label = h3("Slider"), min = 0,
max = 100, value = 50),
plotOutput('hist')
)
server <- function(input, output){
output$hist <- renderPlot({
hist(rnorm(input$slider))
})
}
shinyApp(ui = ui, server = server)
install.packages('rgbif')
occ_count(basisOfRecord='OBSERVATION')
library("rgbif")
occ_count(basisOfRecord='OBSERVATION')
library("rgbif")
US_code <- isocodes[grep("U.S", isocodes$name), "code"]
occ_count(country=us_code)
occ_count(basisOfRecord='OBSERVATION')
occ_count(taxonKey=2435099, georeferenced=TRUE)
occ_count(country=denmark_code)
occ_count(taxonKey = NULL, georeferenced = TRUE,
basisOfRecord = NULL, datasetKey = NULL, date = NULL,
typeStatus = NULL, country = NULL, year = NULL, from = NULL,
to = NULL, type = "count", publishingCountry = "US",
protocol = NULL, curlopts = list())
Mammals.occ <- occ_search(taxonKey = keys, limit=10000, return = 'data', hasCoordinate = T, country = 'US')
keys <- name_backbone('Mammals')$usageKey
Mammals.occ <- occ_search(taxonKey = keys, limit=10000, return = 'data', hasCoordinate = T, country = 'US')
Mammals.oc
Mammals.occ
occ_download("basisOfRecord = Mammals", 'country = US', "hasCoordinate = true",)
library("rgbif")
occ_download("basisOfRecord = Mammals", 'country = US', "hasCoordinate = true",)
setwd("C:/Users/rahul/Desktop/shiny")
shiny::runApp()
runApp()
install.packages("shinydashboard")
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/rahul/Desktop/Test 3")
# loading packages, if not installed, installing them
pcakages <- c( "rgbif", "bdvis", "shiny", "shinydashboard") # list of packages needed
sapply(pcakages, require, character.only = TRUE)
mammals <-occ_search(taxonKey = key,country = 'US', limit = 100)
key <- name_backbone(name = "Mammalia")$usageKey
mammals <-occ_search(taxonKey = key,country = 'US', limit = 100)
colnames(mammals)
mammals
colnames(mammals)
colnames("mammals")
colnames(mammals)
mammals
colnames(mammals)
colnames(mammals)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
pcakages <- c( "rgbif", "bdvis", "shiny", "shinydashboard") # list of packages needed
req_packages <- pcakages[!(pcakages %in% installed.packages()[, "Package"])] # checking if the exist
if (length(req_packages) > 0) { # installing is needed
install.packages(req_packages, dependencies = TRUE)
}
sapply(pcakages, require, character.only = TRUE)
key <- name_backbone(name = "Mammalia")$usageKey
mammals <-occ_search(taxonKey = key,country = 'US', limit = 100)
inat=format_bdvis(mammals,source='rgbif')
mammlas
mammals
typeof(mammals)
mammals
mammals_g <- mammals[!is.na(mammals$Latitude) & !is.na(mammals$Longitude),
c("Cell_id", "Centi_cell_id","Longitude", "Latitude")]
# loading packages, if not installed, installing them
pcakages <- c( "rgbif", "bdvis") # list of packages needed
req_packages <- pcakages[!(pcakages %in% installed.packages()[, "Package"])] # checking if the exist
if (length(req_packages) > 0) { # installing is needed
install.packages(req_packages, dependencies = TRUE)
}
sapply(pcakages, require, character.only = TRUE)
#Download 1000 GBIF's occurence data of Class Mammals
key <- name_backbone(name = "Mammalia")$usageKey
mammals <-occ_search(taxonKey = key,country = 'US', limit = 10000)
# loading packages, if not installed, installing them
pcakages <- c( "rgbif", "bdvis") # list of packages needed
req_packages <- pcakages[!(pcakages %in% installed.packages()[, "Package"])] # checking if the exist
if (length(req_packages) > 0) { # installing is needed
install.packages(req_packages, dependencies = TRUE)
}
sapply(pcakages, require, character.only = TRUE)
#Download 1000 GBIF's occurence data of Class Mammals
key <- name_backbone(name = "Mammalia")$usageKey
mammals <-occ_search(taxonKey = key,country = 'US', limit = 1000)
colnames(mammals)
mammals_g <- mammals[!is.na(mammals$Latitude) & !is.na(mammals$Longitude),
c("Cell_id", "Centi_cell_id","Longitude", "Latitude")]
colnames(mammals)
typeof(mammals)
mammals
bdsummary(mammals_g)
bdsummary(mammals)
bdsummary(mammals)
mammals_g <- mammals[!is.na(mammals$Latitude) & !is.na(mammals$Longitude),
c("Longitude", "Latitude")]
colnames(mammals)
colnames(mammals)
mammals <-occ_search(taxonKey = key,country = 'US', limit = 1000)
library("bdvis")
library("rgbif")
library("bdvis")
library("rgbif")
mammals <-occ_search(taxonKey = key,country = 'US', limit = 1000)
bdsummary(mammals)
inat<- format_bdvis(mammals)
inat=format_bdvis(mammals,source='rgbif')
bdsummary(mammals)
inat=format_bdvis(mammals,source='rgbif')
source('~/gsoc1stTest.R')
#Download 1000 GBIF's occurence data of Class Mammals
key <- name_backbone(name = "Mammalia")$usageKey
mammals <-occ_search(taxonKey = key,country = 'US', limit = 1000)
inat=format_bdvis(mammals,source='rgbif')
source('~/gsoc1stTest.R')
source('C:/Users/rahul/Desktop/Test 3/aa.R')
mammals <-occ_download(taxonKey = key,country = 'US', limit = 1000, user = "rahul.chauhan049", pwd = "rahulis1")
mammals <-occ_download(taxonKey = key,country = 'US', limit = 1000, user = "rahul.chauhan049@gmail.com", pwd = "rahulis1")
mammals <-occ_download(taxonKey = key,country = 'US', limit = 1000, user = "rahul.chauhan049", pwd = "rahulis1", email = "rahul.chauhan049@gmail.com")
key <- name_backbone(name = "Mammalia")$usageKey
mammals <-occ_download(taxonKey = key,country = 'US', limit = 1000, user = "rahul.chauhan049", pwd = "rahulis1", email = "rahul.chauhan049@gmail.com")
mammals <-occ_download("basisOfRecord = Mammalia",country = 'US', limit = 1000, user = "rahul.chauhan049", pwd = "rahulis1", email = "rahul.chauhan049@gmail.com")
mammals <-occ_download(taxonKey = key,country = 'US',user = "rahul.chauhan049", pwd = "rahulis1", email = "rahul.chauhan049@gmail.com")
mammals <-occ_download(taxonKey = key)
mammals <-occ_download(taxonKey = key,user = "rahul.chauhan049", pwd = "rahulis1", email = "rahul.chauhan049@gmail.com")
mammals <-occ_download_prep(taxonKey = key,country = 'US', limit = 1000, user = "rahul.chauhan049", pwd = "rahulis1", email = "rahul.chauhan049@gmail.com")
inat<- format_bdvis(mammals)
mammals <-occ_search(taxonKey = key,country = 'US', limit = 100)
mammals
`colnames<-`("mammals")
colnames("mammals")
colnames(mammals)
mammal <-occ_search(taxonKey = key,country = 'US', limit = 100)
colnames(mammal)
typeof(mammal)
typeof("mammal")
inat<- format_bdvis(mammals)
mammal.df <- do.call(rbind.data.frame, mammal)
mammal.df <- do.call(rbind.data.frame, mammal)
mammal <-occ_search(taxonKey = key,country = 'US', limit = 100)
mammal.df <- do.call(rbind.data.frame, mammal)
mammal.df <- do.call(rbind, mammals)
OS1 <- as.data.frame(mammal)
mammal <-occ_search(taxonKey = key, limit = 100)
OS1 <- as.data.frame(mammal)
dat <- data.frame(mammal)
inat=getcellid(inat)
inat=getcellid(mammals)
inat=gettaxo(mammals)
inat=gettaxo(inat)
inat=format_bdvis(mammals,source='rgbif')
mapgrid(indf = inat, ptype = "records", title = "Mammals", bbox = NA,
legscale = 0, collow = "blue", colhigh = "red",
mapdatabase = "world", region = "US", shp = NA, gridscale = 1,
customize = NULL)
mapgrid(indf = mammlas, ptype = "records", title = "Mammals", bbox = NA,
legscale = 0, collow = "blue", colhigh = "red",
mapdatabase = "world", region = "US", shp = NA, gridscale = 1,
customize = NULL)
mapgrid(indf = mammals, ptype = "records", title = "Mammals", bbox = NA,
legscale = 0, collow = "blue", colhigh = "red",
mapdatabase = "world", region = "US", shp = NA, gridscale = 1,
customize = NULL)
mapgrid(indf = mammals, ptype = "records", title = "Mammals", bbox = NA,
legscale = 0, collow = "blue", colhigh = "red",
mapdatabase = "world", region = "US", shp = NA, gridscale = 1,
customize = NULL)
colnames(mammals)
dat <- data.frame(mammal)
mammal
mammal <- occ_search(taxonKey = key,country = 'US', limit = 100)
colnames(mammals)
?colnames
mammal <- occ_search(taxonKey = key,country = 'US', limit = 100, return = "data")
colnames(mammals)[1:10]
View(mammal)
# loading packages, if not installed, installing them
pcakages <- c( "rgbif", "maps", "raster", "rgeos", "sp", "ellipse") # list of packages needed
req_packages <- pcakages[!(pcakages %in% installed.packages()[, "Package"])] # checking if the exist
if (length(req_packages) > 0) { # installing if needed
install.packages(req_packages, dependencies = TRUE)
}
sapply(pcakages, require, character.only = TRUE) # loading
#Download 1000 GBIF's occurence data of Class Mammals
key <- name_backbone(name = "Mammalia")$usageKey
mammal <- occ_search(taxonKey = key,country = 'US', limit = 100, return = "data")
colnames(mammals)
#Download 1000 GBIF's occurence data of Class Mammals
key <- name_backbone(name = "Mammalia")$usageKey
mammal <- occ_search(taxonKey = key,country = 'US', limit = 100, return = "data")
colnames(mammals)
source('C:/Users/rahul/Desktop/Test 3/aa.R')
source('C:/Users/rahul/Desktop/Test 3/aa.R')
mammls
mammals
View(mammal)
typeof(mammal)
colnames(dat)
View(dat)
colnames(mammal)
colnames(mammal)
runApp()
runApp()
runApp()
runApp()
View(mammals)
runApp()
data
runApp()
pcakages <- c( "rgbif", "bdvis", "shiny", "shinydashboard") # list of packages needed
req_packages <- pcakages[!(pcakages %in% installed.packages()[, "Package"])] # checking if the exist
if (length(req_packages) > 0) { # installing is needed
install.packages(req_packages, dependencies = TRUE)
}
sapply(pcakages, require, character.only = TRUE)
key <- name_backbone(name = "Mammalia")$usageKey
occ <-occ_search(taxonKey = key,country = 'US', limit = 100)
occ=format_bdvis(occ,source='rgbif')
occ
View(occ)
occ <-occ_search(taxonKey = key,country = 'US', limit = 100)
occ1 <-occ_search(taxonKey = key,country = 'US', limit = 100)
key
sapply(pcakages, require, character.only = TRUE)
sapply(pcakages, require, character.only = TRUE)
occ1 <-occ_search(taxonKey = key,country = 'US', limit = 100)
occ=format_bdvis(occ,source='rgbif')
occ=format_bdvis(occ,source='rgbif')
occ <- data.frame(occ1)
View(occ1)
View(occ1)
View(occ1)
occ1 <-occ_search(taxonKey = key,country = 'US', limit = 100)
key <- name_backbone(name = "Mammalia")$usageKey
occ1 <-occ_search(taxonKey = key,country = 'US', limit = 100)
occ
occ1
typeof(occ1)
inat <-getcellid(occ1)
View(inat)
mammal
colnames(mammal)
occ=format_bdvis(occ,source='rgbif')
typeof(mammal)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
occ <-occ_download(taxonKey = key,country = 'US', limit = 100, user = "rahul.chauhan049", pwd = "rahulis1", email = "rahul.chauhan049@gmail.com")
